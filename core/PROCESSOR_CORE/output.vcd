$date
	Sat Feb 26 23:20:10 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! zero_flag $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module test_core $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 ! zero_flag $end
$var wire 1 $ write $end
$var wire 5 % rw [4:0] $end
$var wire 5 & rs2 [4:0] $end
$var wire 5 ' rs1 [4:0] $end
$var wire 7 ( operation [6:0] $end
$var wire 32 ) instruction [31:0] $end
$scope module datapath_module $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 ! zero_flag $end
$var wire 1 $ write $end
$var wire 32 * rwd [31:0] $end
$var wire 5 + rw [4:0] $end
$var wire 5 , rs2 [4:0] $end
$var wire 5 - rs1 [4:0] $end
$var wire 32 . rd2 [31:0] $end
$var wire 32 / rd1 [31:0] $end
$var wire 7 0 operation [6:0] $end
$scope module alu_inst $end
$var wire 7 1 operation [6:0] $end
$var wire 32 2 ip2 [31:0] $end
$var wire 32 3 ip1 [31:0] $end
$var reg 32 4 result [31:0] $end
$var reg 1 ! zero_flag $end
$upscope $end
$scope module register_inst $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 32 5 rwd [31:0] $end
$var wire 1 $ write $end
$var wire 5 6 rw [4:0] $end
$var wire 5 7 rs2 [4:0] $end
$var wire 5 8 rs1 [4:0] $end
$var wire 32 9 rd2 [31:0] $end
$var wire 32 : rd1 [31:0] $end
$upscope $end
$upscope $end
$scope module instruction_decode $end
$var wire 32 ; instruction [31:0] $end
$var reg 7 < operation [6:0] $end
$var reg 5 = rs1 [4:0] $end
$var reg 5 > rs2 [4:0] $end
$var reg 5 ? rw [4:0] $end
$var reg 1 @ type $end
$var reg 1 $ write $end
$upscope $end
$scope module instruction_fetch $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 32 A instruction [31:0] $end
$var reg 32 B pc [31:0] $end
$scope module inst_mem $end
$var wire 32 C pc [31:0] $end
$var wire 1 # reset $end
$var wire 32 D instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100101000000001100000000 D
b0 C
b0 B
b100101000000001100000000 A
0@
b110 ?
b1000 >
b1001 =
b0 <
b100101000000001100000000 ;
b1001 :
b1001 9
b1001 8
b1001 7
b110 6
b10010 5
b10010 4
b1001 3
b1001 2
b0 1
b0 0
b1001 /
b1001 .
b1001 -
b1001 ,
b110 +
b10010 *
b100101000000001100000000 )
b0 (
b1001 '
b1000 &
b110 %
1$
1#
0"
0!
$end
#10
0#
#20
b10011 .
b10011 2
b10011 9
b10011 /
b10011 3
b10011 :
1!
b0 *
b0 4
b0 5
b10010 &
b10010 >
b10011 '
b10011 ,
b10011 -
b10011 7
b10011 8
b10011 =
b1 (
b1 0
b1 1
b1 <
b1000001001110010000001100000001 )
b1000001001110010000001100000001 ;
b1000001001110010000001100000001 A
b1000001001110010000001100000001 D
b100 B
b100 C
1"
#40
0"
#60
b10101 .
b10101 2
b10101 9
b10101 /
b10101 3
b10101 :
0!
b110111001 *
b110111001 4
b110111001 5
b100 %
b100 +
b100 6
b100 ?
b10100 &
b10100 >
b10101 '
b10101 ,
b10101 -
b10101 7
b10101 8
b10101 =
b101 (
b101 0
b101 1
b101 <
b11010110100000001000000101 )
b11010110100000001000000101 ;
b11010110100000001000000101 A
b11010110100000001000000101 D
b1000 B
b1000 C
1"
#80
0"
#100
b10111 .
b10111 2
b10111 9
b10111 /
b10111 3
b10111 :
1!
b0 *
b0 4
b0 5
b11100 %
b11100 +
b11100 6
b11100 ?
b10110 &
b10110 >
b10111 '
b10111 ,
b10111 -
b10111 7
b10111 8
b10111 =
b100 (
b100 0
b100 1
b100 <
b1011110110100111000000100 )
b1011110110100111000000100 ;
b1011110110100111000000100 A
b1011110110100111000000100 D
b1100 B
b1100 C
1"
#120
0"
#140
b11001 .
b11001 2
b11001 9
b11001 /
b11001 3
b11001 :
0!
b110010000000000000000000000000 *
b110010000000000000000000000000 4
b110010000000000000000000000000 5
0$
1@
b11000 &
b11000 >
b11001 '
b11001 ,
b11001 -
b11001 7
b11001 8
b11001 =
b1000 (
b1000 0
b1000 1
b1000 <
b1100111000001111000001000 )
b1100111000001111000001000 ;
b1100111000001111000001000 A
b1100111000001111000001000 D
b10000 B
b10000 C
1"
#160
0"
#180
b11011 .
b11011 2
b11011 9
b11011 /
b11011 3
b11011 :
1!
b0 *
b0 4
b0 5
b11110 %
b11110 +
b11110 6
b11110 ?
b11010 &
b11010 >
b11011 '
b11011 ,
b11011 -
b11011 7
b11011 8
b11011 =
b1110 (
b1110 0
b1110 1
b1110 <
b1101111010101111100001110 )
b1101111010101111100001110 ;
b1101111010101111100001110 A
b1101111010101111100001110 D
b10100 B
b10100 C
1"
#200
0"
#220
b1101 .
b1101 2
b1101 9
b1101 /
b1101 3
b1101 :
0!
b1101 *
b1101 4
b1101 5
b1100 &
b1100 >
b1101 '
b1101 ,
b1101 -
b1101 7
b1101 8
b1101 =
b10 (
b10 0
b10 1
b10 <
b110101100111111100000010 )
b110101100111111100000010 ;
b110101100111111100000010 A
b110101100111111100000010 D
b11000 B
b11000 C
1"
#240
0"
#260
b1111 *
b1111 4
b1111 5
b1111 .
b1111 2
b1111 9
b1111 /
b1111 3
b1111 :
1$
0@
b10000 %
b10000 +
b10000 6
b10000 ?
b1110 &
b1110 >
b1111 '
b1111 ,
b1111 -
b1111 7
b1111 8
b1111 =
b11 (
b11 0
b11 1
b11 <
b111101110110100000000011 )
b111101110110100000000011 ;
b111101110110100000000011 A
b111101110110100000000011 D
b11100 B
b11100 C
1"
#280
0"
#300
bx .
bx 2
bx 9
bx /
bx 3
bx :
x$
x@
bx %
bx +
bx 6
bx ?
bx &
bx >
bx '
bx ,
bx -
bx 7
bx 8
bx =
bx (
bx 0
bx 1
bx <
bx )
bx ;
bx A
bx D
b100000 B
b100000 C
1"
#320
0"
#340
b100100 B
b100100 C
1"
#360
0"
#380
b101000 B
b101000 C
1"
#400
0"
