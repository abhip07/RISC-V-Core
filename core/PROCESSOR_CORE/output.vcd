$date
	Sat Feb 26 22:22:53 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! zero_flag $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module test_core $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 ! zero_flag $end
$var wire 1 $ write $end
$var wire 5 % rw [4:0] $end
$var wire 5 & rs2 [4:0] $end
$var wire 5 ' rs1 [4:0] $end
$var wire 7 ( operation [6:0] $end
$var wire 32 ) instruction [31:0] $end
$scope module datapath_module $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 ! zero_flag $end
$var wire 1 $ write $end
$var wire 32 * rwd [31:0] $end
$var wire 5 + rw [4:0] $end
$var wire 5 , rs2 [4:0] $end
$var wire 5 - rs1 [4:0] $end
$var wire 32 . rd2 [31:0] $end
$var wire 32 / rd1 [31:0] $end
$var wire 7 0 operation [6:0] $end
$scope module alu_inst $end
$var wire 7 1 operation [6:0] $end
$var wire 32 2 ip2 [31:0] $end
$var wire 32 3 ip1 [31:0] $end
$var reg 32 4 result [31:0] $end
$var reg 1 ! zero_flag $end
$upscope $end
$scope module register_inst $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 32 5 rwd [31:0] $end
$var wire 1 $ write $end
$var wire 5 6 rw [4:0] $end
$var wire 5 7 rs2 [4:0] $end
$var wire 5 8 rs1 [4:0] $end
$var wire 32 9 rd2 [31:0] $end
$var wire 32 : rd1 [31:0] $end
$upscope $end
$upscope $end
$scope module instruction_decode $end
$var wire 32 ; instruction [31:0] $end
$var reg 7 < operation [6:0] $end
$var reg 5 = rs1 [4:0] $end
$var reg 5 > rs2 [4:0] $end
$var reg 5 ? rw [4:0] $end
$var reg 1 @ type $end
$var reg 1 $ write $end
$upscope $end
$scope module instruction_fetch $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 32 A instruction [31:0] $end
$var reg 32 B pc [31:0] $end
$scope module inst_mem $end
$var wire 32 C pc [31:0] $end
$var wire 1 # reset $end
$var wire 32 D instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100101000000001100110011 D
b0 C
b0 B
b100101000000001100110011 A
0@
b110 ?
b1000 >
b1001 =
b110011 <
b100101000000001100110011 ;
b0 :
b0 9
b1001 8
b1001 7
b110 6
bx 5
bx 4
b0 3
b0 2
b110011 1
b110011 0
b0 /
b0 .
b1001 -
b1001 ,
b110 +
bx *
b100101000000001100110011 )
b110011 (
b1001 '
b1000 &
b110 %
1$
1#
0"
0!
$end
#10
0#
#20
b111 %
b111 +
b111 6
b111 ?
b10010 &
b10010 >
b10011 '
b10011 ,
b10011 -
b10011 7
b10011 8
b10011 =
b1000001001110010000001110110011 )
b1000001001110010000001110110011 ;
b1000001001110010000001110110011 A
b1000001001110010000001110110011 D
b100 B
b100 C
1"
#40
0"
#60
b101 %
b101 +
b101 6
b101 ?
b10100 &
b10100 >
b10101 '
b10101 ,
b10101 -
b10101 7
b10101 8
b10101 =
b11010110100000001010110011 )
b11010110100000001010110011 ;
b11010110100000001010110011 A
b11010110100000001010110011 D
b1000 B
b1000 C
1"
#80
0"
#100
b11100 %
b11100 +
b11100 6
b11100 ?
b10110 &
b10110 >
b10111 '
b10111 ,
b10111 -
b10111 7
b10111 8
b10111 =
b1011110110100111000110011 )
b1011110110100111000110011 ;
b1011110110100111000110011 A
b1011110110100111000110011 D
b1100 B
b1100 C
1"
#120
0"
#140
0$
1@
b11101 %
b11101 +
b11101 6
b11101 ?
b11000 &
b11000 >
b11001 '
b11001 ,
b11001 -
b11001 7
b11001 8
b11001 =
b1100111000001111010110011 )
b1100111000001111010110011 ;
b1100111000001111010110011 A
b1100111000001111010110011 D
b10000 B
b10000 C
1"
#160
0"
#180
b11110 %
b11110 +
b11110 6
b11110 ?
b11010 &
b11010 >
b11011 '
b11011 ,
b11011 -
b11011 7
b11011 8
b11011 =
b1101111010101111100110011 )
b1101111010101111100110011 ;
b1101111010101111100110011 A
b1101111010101111100110011 D
b10100 B
b10100 C
1"
#200
0"
#220
b11111 %
b11111 +
b11111 6
b11111 ?
b1100 &
b1100 >
b1101 '
b1101 ,
b1101 -
b1101 7
b1101 8
b1101 =
b110101100111111110110011 )
b110101100111111110110011 ;
b110101100111111110110011 A
b110101100111111110110011 D
b11000 B
b11000 C
1"
#240
0"
#260
1$
0@
b10001 %
b10001 +
b10001 6
b10001 ?
b1110 &
b1110 >
b1111 '
b1111 ,
b1111 -
b1111 7
b1111 8
b1111 =
b111101110110100010110011 )
b111101110110100010110011 ;
b111101110110100010110011 A
b111101110110100010110011 D
b11100 B
b11100 C
1"
#280
0"
#300
bx .
bx 2
bx 9
bx /
bx 3
bx :
x$
x@
bx %
bx +
bx 6
bx ?
bx &
bx >
bx '
bx ,
bx -
bx 7
bx 8
bx =
bx (
bx 0
bx 1
bx <
bx )
bx ;
bx A
bx D
b100000 B
b100000 C
1"
#320
0"
#340
b100100 B
b100100 C
1"
#360
0"
#380
b101000 B
b101000 C
1"
#400
0"
